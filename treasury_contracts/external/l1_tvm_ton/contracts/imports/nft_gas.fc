#include "precompiled_gas_const/nft_gas_utils.fc";
#include "precompiled_gas_const/ccl_gas_utils.fc";
#include "utils.fc";

() check_amount_is_enough_to_transfer(int msg_value, int forward_amount, int fwd_fee) impure inline {
  ;; nft item -> 1. owner address, 2. response address
  int fwd_count = forward_amount ? 2 : 1;

  int nft_item_gas_consumption = get_precompiled_gas_consumption();

  int transfer_gas_consumption = null?(nft_item_gas_consumption) ? NFT_TRANSFER_GAS_CONSUMPTION : nft_item_gas_consumption;

  throw_unless(ERROR::NOT_ENOUGH_GAS, 
    msg_value > 
    forward_amount +
    fwd_count * fwd_fee + 
    calculate_nft_item_min_storage_fee() +
    get_compute_fee(BASECHAIN, transfer_gas_consumption)
  );
}

() check_amount_is_enough_to_burn(int msg_value, int crosschain_amount, int fwd_fee, int protocol_fee, int tac_executors_fee, int ton_executors_fee) impure inline {
  ;; nft item -> ccl -> log
  ;; or
  ;; nft item -> ccl -> nft item
  int fwd_count = 2;

  int nft_item_gas_consumption = get_precompiled_gas_consumption();

  int burn_gas_consumption = null?(nft_item_gas_consumption) ? NFT_BURN_GAS_CONSUMPTION : nft_item_gas_consumption;

  throw_unless(ERROR::NOT_ENOUGH_GAS, 
    msg_value >
    protocol_fee +
    tac_executors_fee +
    ton_executors_fee +
    crosschain_amount +
    fwd_count * fwd_fee +
    get_compute_fee(BASECHAIN, burn_gas_consumption) +
    get_compute_fee(BASECHAIN, TVM_MSG_TO_EVM_GAS_CONSUMPTION) +
    get_compute_fee(BASECHAIN, NFT_HANDLE_ERROR_NOTIFICATION_GAS_CONSUMPTION) +
    calculate_ccl_min_storage_fee() +
    calculate_nft_item_min_storage_fee()
  );
}
