;; =============== Multisig =============================

#include "imports/stdlib.fc";
#include "imports/utils.fc";
#pragma version >=0.4.0;

;; =============== consts =============================

const MIN_TON_FOR_INTERNAL = 20000000; ;; 0.02 TON
const MIN_TON_FOR_STORAGE = 200000000 ; ;; 0.2 TON

;; time
const TIME::MAX_DELAY_FOR_QUERY_ID = 24 * 60 * 60; ;; 24h

const MAX_FLOOD = 10;

;; errors
const ERROR::SENDER_PUBLIC_KEY_NOT_FOUND = 31;
const ERROR::INVALID_SENDER_SIGNATURE = 32;
const ERROR::WALLET_ID_DOES_NOT_MATCH = 33;
const ERROR::QUERY_HAS_ALREADY_BEEN_COMPLETED = 34;
const ERROR::INVALID_QUERY_ID = 35;
const ERROR::NOT_ALL_OWNERS_CONFIRMED = 36;
const ERROR::PUBLIC_KEY_NOT_FOUND = 37;
const ERROR::INVALID_SIGNATURE = 38;
const ERROR::ALREADY_SIGNED = 39;

;; global
global int wallet_id;
global int n;
global int k;
global cell owner_infos;
global cell pending_queries;


;; =============== storage =============================


() load_data() impure inline {
    slice ds = get_data().begin_parse();
    wallet_id = ds~load_uint(32);
    n = ds~load_uint(8);
    k = ds~load_uint(8);
    owner_infos = ds~load_dict();
    pending_queries = ds~load_dict();
}

() save_data() impure inline {
    set_data(begin_cell()
        .store_uint(wallet_id, 32)
        .store_uint(n, 8)
        .store_uint(k, 8)
        .store_dict(owner_infos)
        .store_dict(pending_queries)
        .end_cell()
    );
}

;; =============== utils =============================

(int) check_signatures(cell owner_infos, cell signatures, int hash) inline_ref {
    int cnt = 0;
    int cnt_bits = 0;
    do {
        slice cs = signatures.begin_parse();
        slice signature = cs~load_bits(512);
        int i = cs~load_uint(8);
        signatures = cs~load_dict();

        (slice owner_info, var found?) = owner_infos.udict_get?(8, i);
        throw_unless(ERROR::PUBLIC_KEY_NOT_FOUND, found?);
        throw_unless(ERROR::INVALID_SIGNATURE, check_signature(hash, signature, owner_info.preload_uint(256)));

        int mask = (1 << i);
        throw_unless(ERROR::ALREADY_SIGNED, (cnt_bits & mask) == 0);
        cnt_bits |= mask;
        cnt += 1;
    } until (cell_null?(signatures));
    return cnt;
}

;; =============== common multisig utils =============================

() cleanup_queries(int bound) impure {
    int need_save = 0;
    bound -= (64 << 32); ;; clean up records expired more than 64 seconds ago
    do {
        var (pending_queries', i, _, f) = pending_queries.udict_delete_get_min(64);
        f~touch();
        if (f) {
            f = (i < bound);
        }
        if (f) {
            pending_queries = pending_queries';
            need_save = -1;
        }
    } until (~ f);

    if (need_save) {
        save_data();
    }
}


;; =============== recv =============================

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

() recv_external(slice in_msg) impure {
    ;; empty message triggers init
    if (slice_empty?(in_msg)) {
        return ();
    }

    ;; Check root signature
    slice root_signature = in_msg~load_bits(512);
    int root_hash = slice_hash(in_msg);
    int root_i = in_msg~load_uint(8);

    load_data();

    (slice public_key, var found?) = owner_infos.udict_get?(8, root_i);
    throw_unless(ERROR::SENDER_PUBLIC_KEY_NOT_FOUND, found?);
    throw_unless(ERROR::INVALID_SENDER_SIGNATURE, check_signature(root_hash, root_signature, public_key.preload_uint(256)));

    cell signatures = in_msg~load_dict();

    var hash = slice_hash(in_msg);
    int query_wallet_id = in_msg~load_uint(32);
    throw_unless(ERROR::WALLET_ID_DOES_NOT_MATCH, query_wallet_id == wallet_id);

    int query_id = in_msg~load_query_id();
    (slice query, var found?) = pending_queries.udict_get?(64, query_id);
    throw_if(ERROR::QUERY_HAS_ALREADY_BEEN_COMPLETED, found?);
    var bound = (now() << 32);
    throw_if(ERROR::INVALID_QUERY_ID, query_id < bound);
    throw_if(ERROR::INVALID_QUERY_ID, query_id > (bound + (TIME::MAX_DELAY_FOR_QUERY_ID << 32)));

    accept_message();
    pending_queries~udict_set_builder(64, query_id, begin_cell().store_int(0, 1));
    save_data();
    commit();

    int cnt = check_signatures(owner_infos, signatures, hash);

    throw_unless(ERROR::NOT_ALL_OWNERS_CONFIRMED, cnt >= k);

    var mode = in_msg~load_uint(8);
    send_raw_message(in_msg~load_ref(), mode);

    save_data();

    accept_message();

    cleanup_queries(bound);
}


;; =============== getters =============================

cell get_public_keys() method_id {
    load_data();
    return owner_infos;
}

(int, int) get_n_k() method_id {
    load_data();
    return (n, k);
}

(int, int, int, cell, cell) get_full_data() method_id {
    load_data();
    return (
        wallet_id,
        n,
        k,
        owner_infos,
        pending_queries
    );
}