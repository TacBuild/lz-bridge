#include "imports/stdlib.fc";
#include "imports/utils.fc";
#include "imports/precompiled_gas_const/settings_gas_utils.fc";


;; =============== CONSTS =============================
const SETTINGS_KEY_LENGTH = 256;

;; anyone ops
const ANYONE_OP::GET_VALUE = 0x399685b8;
const ANYONE_OP::GET_ALL = 0x40148d4a;

;; admin ops
const ADMIN_OP::SET_VALUE = 0x245e9406;
const ADMIN_OP::CHANGE_ADMIN_ADDRESS = 0x581879bc;
const ADMIN_OP::CANCEL_CHANGING_ADMIN_ADDRESS = 0x60094a1b;

const NEW_ADMIN_OP::CONFIRM_CHANGING_ADMIN_ADDRESS = 0x6a4fbe34;

;; settings ops
const SETTINGS_OP::SEND_VALUE = 0x707a28d2;
const SETTINGS_OP::SEND_ALL = 0xcf03b318;

;; errors
const ERROR::NOT_FROM_ADMIN = 70;
const ERROR::NOT_FROM_NEW_ADMIN = 71;

const ERROR::NEW_ADMIN_ADDRESS_IS_NONE = 80;

;; global
global int settings_id;
global slice admin_address;
global slice new_admin_address;
global cell settings;


;; =============== STORAGE =============================

() load_data() impure inline {
    var ds = get_data().begin_parse();
    settings_id = ds~load_uint(8);
    admin_address = ds~load_msg_addr();
    new_admin_address = ds~load_msg_addr();
    settings = ds~load_dict();
}

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_uint(settings_id, 8)
            .store_slice(admin_address)
            .store_slice(new_admin_address)
            .store_dict(settings)
            .end_cell()
    );
}


;; =============== UTILS =============================

() update_setting(int key, cell value) impure inline {
    return settings~udict_set_ref(SETTINGS_KEY_LENGTH, key, value);
}

(cell, int) get_setting(int key) inline {
    return settings.udict_get_ref?(SETTINGS_KEY_LENGTH, key);
}


;; =============== RECV =============================

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_msg_flags();

    if (is_bounced(flags)) {
        ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    (int op, int query_id) = in_msg_body~load_op_and_query_id();

    load_data();

    int ton_balance_before_msg = my_balance - msg_value;
    int min_storage_fee = calculate_settings_min_storage_fee(settings);
    int storage_fee = min_storage_fee - min(ton_balance_before_msg, min_storage_fee);
    msg_value -= storage_fee;

    throw_unless(ERROR::NOT_ENOUGH_TON, msg_value > 0);

    if (op == ADMIN_OP::SET_VALUE) {
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices_bits(sender_address, admin_address));
        var key = in_msg_body~load_hash();
        var value = in_msg_body~load_ref();
        update_setting(key, value);
        save_data();
        return ();
    }

    if (op == ADMIN_OP::CHANGE_ADMIN_ADDRESS) {
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices_bits(sender_address, admin_address));
        new_admin_address = in_msg_body~load_msg_addr();
        throw_if(ERROR::NEW_ADMIN_ADDRESS_IS_NONE, equal_slices_bits(new_admin_address, address_none()));
        save_data();
        return ();
    }

    if (op == ADMIN_OP::CANCEL_CHANGING_ADMIN_ADDRESS) {
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices_bits(sender_address, admin_address));
        new_admin_address = address_none();
        save_data();
        return ();
    }

    if (op == NEW_ADMIN_OP::CONFIRM_CHANGING_ADMIN_ADDRESS) {
        throw_unless(ERROR::NOT_FROM_NEW_ADMIN, equal_slices_bits(sender_address, new_admin_address));
        throw_if(ERROR::NEW_ADMIN_ADDRESS_IS_NONE, equal_slices_bits(new_admin_address, address_none()));
        admin_address = new_admin_address;
        new_admin_address = address_none();
        save_data();
        return ();
    }

    if (op == ANYONE_OP::GET_VALUE) {
        var key = in_msg_body~load_hash();
        (cell value, _) = get_setting(key);

        cell payload = begin_cell()
            .store_op_and_query_id(SETTINGS_OP::SEND_VALUE, query_id)
            .store_hash(key)
            .store_maybe_ref(value)
            .end_cell();

        send_msg(
            sender_address,
            0,
            payload,
            FLAGS::NON_BOUNCEABLE,
            SEND_MODE::IGNORE_ERRORS + SEND_MODE::CARRY_ALL_REMAINING_MESSAGE_VALUE
        );

        return ();
    }

    if (op == ANYONE_OP::GET_ALL) {
        cell payload = begin_cell()
            .store_op_and_query_id(SETTINGS_OP::SEND_ALL, query_id)
            .store_dict(settings)
            .end_cell();

        send_msg(
            sender_address,
            0,
            payload,
            FLAGS::NON_BOUNCEABLE,
            SEND_MODE::IGNORE_ERRORS + SEND_MODE::CARRY_ALL_REMAINING_MESSAGE_VALUE
        );

        return ();
    }

    throw(ERROR::UNKNOWN_OP);
}

;; =============== GETTERS =============================

(_) get_full_data() method_id {
    load_data();
    return (
        settings_id,
        admin_address,
        new_admin_address,
        settings
    );
}

(cell, int) get(int key) method_id {
    load_data();
    return get_setting(key);
}

(slice, slice) get_admin_addresses() method_id {
    load_data();
    return (admin_address, new_admin_address);
}

(cell) get_all() method_id {
    load_data();
    return settings;
}
