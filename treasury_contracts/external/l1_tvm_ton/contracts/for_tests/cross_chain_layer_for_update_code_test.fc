;; =============== CrossChainLayer Master Contract =====================

#include "../imports/stdlib.fc";
#pragma version >=0.4.0;


;; =============== CONSTS =============================

;; global
global slice admin_address;
global slice new_admin_address;
global slice sequencer_multisig_address;
global cell merkle_roots;
global int max_roots_size;
global int prev_epoch;
global int curr_epoch;
global int next_voting_time;
global int message_collect_end_time;
global int epoch_delay;
global int ton_protocol_fee;
global int tac_protocol_fee;
global int protocol_fee_supply;
global cell executor_code;


;; =============== STORAGE =============================

() load_data() impure inline {
    cell data = get_data();
    slice ds = get_data().begin_parse();

    admin_address = ds~load_msg_addr();
    new_admin_address = ds~load_msg_addr();
    sequencer_multisig_address = ds~load_msg_addr();

    cell fees = ds~load_ref();
    slice fees_ds = fees.begin_parse();
    tac_protocol_fee = fees_ds~load_coins();
    ton_protocol_fee = fees_ds~load_coins();
    protocol_fee_supply = fees_ds~load_coins();

    executor_code = ds~load_ref();
    cell epoch = ds~load_ref();
    slice epoch_ds = epoch.begin_parse();
    epoch_delay = epoch_ds~load_timestamp();
    prev_epoch = epoch_ds~load_timestamp();
    curr_epoch = epoch_ds~load_timestamp();
    message_collect_end_time = epoch_ds~load_timestamp();
    next_voting_time = epoch_ds~load_timestamp();
    max_roots_size = epoch_ds~load_uint(4);
    merkle_roots = epoch_ds~load_dict();
}


;; =============== RECV =============================

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    return ();
}


;; =============== GETTERS =============================

(_) get_full_data() method_id {
    load_data();
    return (
        admin_address,
        new_admin_address,
        sequencer_multisig_address,
        max_roots_size,
        merkle_roots,
        prev_epoch,
        curr_epoch,
        message_collect_end_time,
        epoch_delay,
        next_voting_time,
        tac_protocol_fee,
        ton_protocol_fee,
        protocol_fee_supply,
        executor_code
    );
}