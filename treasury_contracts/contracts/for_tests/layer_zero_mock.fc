;; =============== USDT Treasury Mock Contract =====================

#include "../../external/l1_tvm_ton/contracts/imports/stdlib.fc";
#include "../imports/usdt_utils.fc";
#include "../../external/l1_tvm_ton/contracts/imports/utils.fc";

#pragma version >=0.4.0;

const JETTON_WALLET_OP::TRANSFER_NOTIFICATION = 0x7362d09c;

global slice jetton_master_address;
global cell jetton_wallet_code;
global int min_ton_amount;
global int fee;

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    jetton_master_address = ds~load_msg_addr();
    jetton_wallet_code = ds~load_ref();
    min_ton_amount = ds~load_coins();
    fee = ds~load_coins();
}

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_slice(jetton_master_address)
            .store_ref(jetton_wallet_code)
            .store_coins(min_ton_amount)
            .store_coins(fee)
            .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_msg_flags();

    if (is_bounced(flags)) {
        ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int fwd_fee_from_in_msg = cs~retrieve_fwd_fee();

    (int op, int query_id) = in_msg_body~load_op_and_query_id();

    load_data();

    slice usdt_jetton_wallet = calculate_user_usdt_jetton_wallet_address(
        my_address(),
        jetton_master_address,
        jetton_wallet_code
    );

    if (op == JETTON_WALLET_OP::TRANSFER_NOTIFICATION) {
        int usdt_amount = in_msg_body~load_coins();
        slice response_address = in_msg_body~load_msg_addr();

        if (msg_value < min_ton_amount) {
            send_jettons(
                usdt_jetton_wallet,
                query_id,
                response_address,
                usdt_amount,
                my_address(),
                msg_value - fee,
                begin_cell().end_cell()
            );
        } else {
            send_msg(
                response_address,
                msg_value - fee,
                begin_cell().end_cell(),
                FLAGS::NON_BOUNCEABLE,
                SEND_MODE::PAY_FEES_SEPARATELY | SEND_MODE::BOUNCE_ON_ACTION_FAIL
            );
        }
    }

    return ();
}
